// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProtoEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEvent_Test1Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEvent_Test1Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtoEvent_Test2Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtoEvent_Test2Event_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtoEvent_event_type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_event_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_event_2eproto() {
  protobuf_AddDesc_event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "event.proto");
  GOOGLE_CHECK(file != NULL);
  ProtoEvent_descriptor_ = file->message_type(0);
  static const int ProtoEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent, test1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent, test2_),
  };
  ProtoEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoEvent_descriptor_,
      ProtoEvent::default_instance_,
      ProtoEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent, _is_default_instance_));
  ProtoEvent_Test1Event_descriptor_ = ProtoEvent_descriptor_->nested_type(0);
  static const int ProtoEvent_Test1Event_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent_Test1Event, message_),
  };
  ProtoEvent_Test1Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoEvent_Test1Event_descriptor_,
      ProtoEvent_Test1Event::default_instance_,
      ProtoEvent_Test1Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoEvent_Test1Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent_Test1Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent_Test1Event, _is_default_instance_));
  ProtoEvent_Test2Event_descriptor_ = ProtoEvent_descriptor_->nested_type(1);
  static const int ProtoEvent_Test2Event_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent_Test2Event, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent_Test2Event, y_),
  };
  ProtoEvent_Test2Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProtoEvent_Test2Event_descriptor_,
      ProtoEvent_Test2Event::default_instance_,
      ProtoEvent_Test2Event_offsets_,
      -1,
      -1,
      -1,
      sizeof(ProtoEvent_Test2Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent_Test2Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtoEvent_Test2Event, _is_default_instance_));
  ProtoEvent_event_type_descriptor_ = ProtoEvent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoEvent_descriptor_, &ProtoEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoEvent_Test1Event_descriptor_, &ProtoEvent_Test1Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProtoEvent_Test2Event_descriptor_, &ProtoEvent_Test2Event::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_event_2eproto() {
  delete ProtoEvent::default_instance_;
  delete ProtoEvent_reflection_;
  delete ProtoEvent_Test1Event::default_instance_;
  delete ProtoEvent_Test1Event_reflection_;
  delete ProtoEvent_Test2Event::default_instance_;
  delete ProtoEvent_Test2Event_reflection_;
}

void protobuf_AddDesc_event_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013event.proto\"\365\001\n\nProtoEvent\022$\n\004type\030\001 \001"
    "(\0162\026.ProtoEvent.event_type\022%\n\005test1\030\002 \001("
    "\0132\026.ProtoEvent.Test1Event\022%\n\005test2\030\003 \001(\013"
    "2\026.ProtoEvent.Test2Event\032\035\n\nTest1Event\022\017"
    "\n\007message\030\003 \001(\005\032\"\n\nTest2Event\022\t\n\001x\030\004 \001(\002"
    "\022\t\n\001y\030\005 \001(\002\"0\n\nevent_type\022\020\n\014TEST_1_EVEN"
    "T\020\000\022\020\n\014TEST_2_EVENT\020\001b\006proto3", 269);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "event.proto", &protobuf_RegisterTypes);
  ProtoEvent::default_instance_ = new ProtoEvent();
  ProtoEvent_Test1Event::default_instance_ = new ProtoEvent_Test1Event();
  ProtoEvent_Test2Event::default_instance_ = new ProtoEvent_Test2Event();
  ProtoEvent::default_instance_->InitAsDefaultInstance();
  ProtoEvent_Test1Event::default_instance_->InitAsDefaultInstance();
  ProtoEvent_Test2Event::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_event_2eproto {
  StaticDescriptorInitializer_event_2eproto() {
    protobuf_AddDesc_event_2eproto();
  }
} static_descriptor_initializer_event_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ProtoEvent_event_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEvent_event_type_descriptor_;
}
bool ProtoEvent_event_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ProtoEvent_event_type ProtoEvent::TEST_1_EVENT;
const ProtoEvent_event_type ProtoEvent::TEST_2_EVENT;
const ProtoEvent_event_type ProtoEvent::event_type_MIN;
const ProtoEvent_event_type ProtoEvent::event_type_MAX;
const int ProtoEvent::event_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoEvent_Test1Event::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoEvent_Test1Event::ProtoEvent_Test1Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoEvent.Test1Event)
}

void ProtoEvent_Test1Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtoEvent_Test1Event::ProtoEvent_Test1Event(const ProtoEvent_Test1Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoEvent.Test1Event)
}

void ProtoEvent_Test1Event::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  message_ = 0;
}

ProtoEvent_Test1Event::~ProtoEvent_Test1Event() {
  // @@protoc_insertion_point(destructor:ProtoEvent.Test1Event)
  SharedDtor();
}

void ProtoEvent_Test1Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoEvent_Test1Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEvent_Test1Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEvent_Test1Event_descriptor_;
}

const ProtoEvent_Test1Event& ProtoEvent_Test1Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

ProtoEvent_Test1Event* ProtoEvent_Test1Event::default_instance_ = NULL;

ProtoEvent_Test1Event* ProtoEvent_Test1Event::New(::google::protobuf::Arena* arena) const {
  ProtoEvent_Test1Event* n = new ProtoEvent_Test1Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoEvent_Test1Event::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoEvent.Test1Event)
  message_ = 0;
}

bool ProtoEvent_Test1Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoEvent.Test1Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 message = 3;
      case 3: {
        if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoEvent.Test1Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoEvent.Test1Event)
  return false;
#undef DO_
}

void ProtoEvent_Test1Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoEvent.Test1Event)
  // optional int32 message = 3;
  if (this->message() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProtoEvent.Test1Event)
}

::google::protobuf::uint8* ProtoEvent_Test1Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoEvent.Test1Event)
  // optional int32 message = 3;
  if (this->message() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ProtoEvent.Test1Event)
  return target;
}

int ProtoEvent_Test1Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoEvent.Test1Event)
  int total_size = 0;

  // optional int32 message = 3;
  if (this->message() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEvent_Test1Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoEvent.Test1Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtoEvent_Test1Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoEvent_Test1Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoEvent.Test1Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoEvent.Test1Event)
    MergeFrom(*source);
  }
}

void ProtoEvent_Test1Event::MergeFrom(const ProtoEvent_Test1Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoEvent.Test1Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message() != 0) {
    set_message(from.message());
  }
}

void ProtoEvent_Test1Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoEvent.Test1Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEvent_Test1Event::CopyFrom(const ProtoEvent_Test1Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoEvent.Test1Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEvent_Test1Event::IsInitialized() const {

  return true;
}

void ProtoEvent_Test1Event::Swap(ProtoEvent_Test1Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoEvent_Test1Event::InternalSwap(ProtoEvent_Test1Event* other) {
  std::swap(message_, other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoEvent_Test1Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEvent_Test1Event_descriptor_;
  metadata.reflection = ProtoEvent_Test1Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoEvent_Test2Event::kXFieldNumber;
const int ProtoEvent_Test2Event::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoEvent_Test2Event::ProtoEvent_Test2Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoEvent.Test2Event)
}

void ProtoEvent_Test2Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ProtoEvent_Test2Event::ProtoEvent_Test2Event(const ProtoEvent_Test2Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoEvent.Test2Event)
}

void ProtoEvent_Test2Event::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

ProtoEvent_Test2Event::~ProtoEvent_Test2Event() {
  // @@protoc_insertion_point(destructor:ProtoEvent.Test2Event)
  SharedDtor();
}

void ProtoEvent_Test2Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtoEvent_Test2Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEvent_Test2Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEvent_Test2Event_descriptor_;
}

const ProtoEvent_Test2Event& ProtoEvent_Test2Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

ProtoEvent_Test2Event* ProtoEvent_Test2Event::default_instance_ = NULL;

ProtoEvent_Test2Event* ProtoEvent_Test2Event::New(::google::protobuf::Arena* arena) const {
  ProtoEvent_Test2Event* n = new ProtoEvent_Test2Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoEvent_Test2Event::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoEvent.Test2Event)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProtoEvent_Test2Event, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProtoEvent_Test2Event*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool ProtoEvent_Test2Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoEvent.Test2Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 4;
      case 4: {
        if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (tag == 45) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoEvent.Test2Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoEvent.Test2Event)
  return false;
#undef DO_
}

void ProtoEvent_Test2Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoEvent.Test2Event)
  // optional float x = 4;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:ProtoEvent.Test2Event)
}

::google::protobuf::uint8* ProtoEvent_Test2Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoEvent.Test2Event)
  // optional float x = 4;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ProtoEvent.Test2Event)
  return target;
}

int ProtoEvent_Test2Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoEvent.Test2Event)
  int total_size = 0;

  // optional float x = 4;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 5;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEvent_Test2Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoEvent.Test2Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtoEvent_Test2Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoEvent_Test2Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoEvent.Test2Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoEvent.Test2Event)
    MergeFrom(*source);
  }
}

void ProtoEvent_Test2Event::MergeFrom(const ProtoEvent_Test2Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoEvent.Test2Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void ProtoEvent_Test2Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoEvent.Test2Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEvent_Test2Event::CopyFrom(const ProtoEvent_Test2Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoEvent.Test2Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEvent_Test2Event::IsInitialized() const {

  return true;
}

void ProtoEvent_Test2Event::Swap(ProtoEvent_Test2Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoEvent_Test2Event::InternalSwap(ProtoEvent_Test2Event* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoEvent_Test2Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEvent_Test2Event_descriptor_;
  metadata.reflection = ProtoEvent_Test2Event_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtoEvent::kTypeFieldNumber;
const int ProtoEvent::kTest1FieldNumber;
const int ProtoEvent::kTest2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtoEvent::ProtoEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoEvent)
}

void ProtoEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  test1_ = const_cast< ::ProtoEvent_Test1Event*>(&::ProtoEvent_Test1Event::default_instance());
  test2_ = const_cast< ::ProtoEvent_Test2Event*>(&::ProtoEvent_Test2Event::default_instance());
}

ProtoEvent::ProtoEvent(const ProtoEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoEvent)
}

void ProtoEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  test1_ = NULL;
  test2_ = NULL;
}

ProtoEvent::~ProtoEvent() {
  // @@protoc_insertion_point(destructor:ProtoEvent)
  SharedDtor();
}

void ProtoEvent::SharedDtor() {
  if (this != default_instance_) {
    delete test1_;
    delete test2_;
  }
}

void ProtoEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtoEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtoEvent_descriptor_;
}

const ProtoEvent& ProtoEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_event_2eproto();
  return *default_instance_;
}

ProtoEvent* ProtoEvent::default_instance_ = NULL;

ProtoEvent* ProtoEvent::New(::google::protobuf::Arena* arena) const {
  ProtoEvent* n = new ProtoEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtoEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoEvent)
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && test1_ != NULL) delete test1_;
  test1_ = NULL;
  if (GetArenaNoVirtual() == NULL && test2_ != NULL) delete test2_;
  test2_ = NULL;
}

bool ProtoEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoEvent.event_type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ProtoEvent_event_type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_test1;
        break;
      }

      // optional .ProtoEvent.Test1Event test1 = 2;
      case 2: {
        if (tag == 18) {
         parse_test1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_test2;
        break;
      }

      // optional .ProtoEvent.Test2Event test2 = 3;
      case 3: {
        if (tag == 26) {
         parse_test2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoEvent)
  return false;
#undef DO_
}

void ProtoEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoEvent)
  // optional .ProtoEvent.event_type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .ProtoEvent.Test1Event test1 = 2;
  if (this->has_test1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->test1_, output);
  }

  // optional .ProtoEvent.Test2Event test2 = 3;
  if (this->has_test2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->test2_, output);
  }

  // @@protoc_insertion_point(serialize_end:ProtoEvent)
}

::google::protobuf::uint8* ProtoEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoEvent)
  // optional .ProtoEvent.event_type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .ProtoEvent.Test1Event test1 = 2;
  if (this->has_test1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->test1_, false, target);
  }

  // optional .ProtoEvent.Test2Event test2 = 3;
  if (this->has_test2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->test2_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ProtoEvent)
  return target;
}

int ProtoEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoEvent)
  int total_size = 0;

  // optional .ProtoEvent.event_type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .ProtoEvent.Test1Event test1 = 2;
  if (this->has_test1()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->test1_);
  }

  // optional .ProtoEvent.Test2Event test2 = 3;
  if (this->has_test2()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->test2_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtoEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProtoEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtoEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoEvent)
    MergeFrom(*source);
  }
}

void ProtoEvent::MergeFrom(const ProtoEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_test1()) {
    mutable_test1()->::ProtoEvent_Test1Event::MergeFrom(from.test1());
  }
  if (from.has_test2()) {
    mutable_test2()->::ProtoEvent_Test2Event::MergeFrom(from.test2());
  }
}

void ProtoEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtoEvent::CopyFrom(const ProtoEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoEvent::IsInitialized() const {

  return true;
}

void ProtoEvent::Swap(ProtoEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtoEvent::InternalSwap(ProtoEvent* other) {
  std::swap(type_, other->type_);
  std::swap(test1_, other->test1_);
  std::swap(test2_, other->test2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtoEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtoEvent_descriptor_;
  metadata.reflection = ProtoEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtoEvent_Test1Event

// optional int32 message = 3;
void ProtoEvent_Test1Event::clear_message() {
  message_ = 0;
}
 ::google::protobuf::int32 ProtoEvent_Test1Event::message() const {
  // @@protoc_insertion_point(field_get:ProtoEvent.Test1Event.message)
  return message_;
}
 void ProtoEvent_Test1Event::set_message(::google::protobuf::int32 value) {
  
  message_ = value;
  // @@protoc_insertion_point(field_set:ProtoEvent.Test1Event.message)
}

// -------------------------------------------------------------------

// ProtoEvent_Test2Event

// optional float x = 4;
void ProtoEvent_Test2Event::clear_x() {
  x_ = 0;
}
 float ProtoEvent_Test2Event::x() const {
  // @@protoc_insertion_point(field_get:ProtoEvent.Test2Event.x)
  return x_;
}
 void ProtoEvent_Test2Event::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoEvent.Test2Event.x)
}

// optional float y = 5;
void ProtoEvent_Test2Event::clear_y() {
  y_ = 0;
}
 float ProtoEvent_Test2Event::y() const {
  // @@protoc_insertion_point(field_get:ProtoEvent.Test2Event.y)
  return y_;
}
 void ProtoEvent_Test2Event::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoEvent.Test2Event.y)
}

// -------------------------------------------------------------------

// ProtoEvent

// optional .ProtoEvent.event_type type = 1;
void ProtoEvent::clear_type() {
  type_ = 0;
}
 ::ProtoEvent_event_type ProtoEvent::type() const {
  // @@protoc_insertion_point(field_get:ProtoEvent.type)
  return static_cast< ::ProtoEvent_event_type >(type_);
}
 void ProtoEvent::set_type(::ProtoEvent_event_type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ProtoEvent.type)
}

// optional .ProtoEvent.Test1Event test1 = 2;
bool ProtoEvent::has_test1() const {
  return !_is_default_instance_ && test1_ != NULL;
}
void ProtoEvent::clear_test1() {
  if (GetArenaNoVirtual() == NULL && test1_ != NULL) delete test1_;
  test1_ = NULL;
}
const ::ProtoEvent_Test1Event& ProtoEvent::test1() const {
  // @@protoc_insertion_point(field_get:ProtoEvent.test1)
  return test1_ != NULL ? *test1_ : *default_instance_->test1_;
}
::ProtoEvent_Test1Event* ProtoEvent::mutable_test1() {
  
  if (test1_ == NULL) {
    test1_ = new ::ProtoEvent_Test1Event;
  }
  // @@protoc_insertion_point(field_mutable:ProtoEvent.test1)
  return test1_;
}
::ProtoEvent_Test1Event* ProtoEvent::release_test1() {
  // @@protoc_insertion_point(field_release:ProtoEvent.test1)
  
  ::ProtoEvent_Test1Event* temp = test1_;
  test1_ = NULL;
  return temp;
}
void ProtoEvent::set_allocated_test1(::ProtoEvent_Test1Event* test1) {
  delete test1_;
  test1_ = test1;
  if (test1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoEvent.test1)
}

// optional .ProtoEvent.Test2Event test2 = 3;
bool ProtoEvent::has_test2() const {
  return !_is_default_instance_ && test2_ != NULL;
}
void ProtoEvent::clear_test2() {
  if (GetArenaNoVirtual() == NULL && test2_ != NULL) delete test2_;
  test2_ = NULL;
}
const ::ProtoEvent_Test2Event& ProtoEvent::test2() const {
  // @@protoc_insertion_point(field_get:ProtoEvent.test2)
  return test2_ != NULL ? *test2_ : *default_instance_->test2_;
}
::ProtoEvent_Test2Event* ProtoEvent::mutable_test2() {
  
  if (test2_ == NULL) {
    test2_ = new ::ProtoEvent_Test2Event;
  }
  // @@protoc_insertion_point(field_mutable:ProtoEvent.test2)
  return test2_;
}
::ProtoEvent_Test2Event* ProtoEvent::release_test2() {
  // @@protoc_insertion_point(field_release:ProtoEvent.test2)
  
  ::ProtoEvent_Test2Event* temp = test2_;
  test2_ = NULL;
  return temp;
}
void ProtoEvent::set_allocated_test2(::ProtoEvent_Test2Event* test2) {
  delete test2_;
  test2_ = test2;
  if (test2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoEvent.test2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
